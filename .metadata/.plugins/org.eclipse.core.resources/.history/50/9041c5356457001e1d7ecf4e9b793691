package com.spring.basic.score.controller;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.spring.basic.score.dto.ScoreListResponseDTO;
import com.spring.basic.score.dto.ScoreRequestDTO;
import com.spring.basic.score.service.ScoreService;

import lombok.RequiredArgsConstructor;


@Controller
@RequestMapping("/score")
@RequiredArgsConstructor //: final 필드가 존재한다면 그것을 초기화해주는 생성자
public class ScoreController {
	
	
	private final ScoreService service;
	
	// 만약에 클래스의 생성자가 단 1개라면
	// 자동으로 @Autowired를 작성해줌.
	// 뭐 나중에 jService , mService 이렇게 여러개가 있을수 있는데
	// 거기 전부다 @Autowried를 작성해주면 가독성이 떨어지니
	// 생성자가 한개인 service는 생략해도됨 // 각 service 앞에 final을 붙이고 @RequiredAr~~를 위에 선언해주면
	
	//1. 성적 등록 화면 띄우기 + 정보 목록 조회
	@GetMapping("/list")
	public String list(Model model) {
		List<ScoreListResponseDTO> dtoList = service.getList();
		model.addAttribute("sList",dtoList);
		return "score/score-list";
	}
	
	//2. 성적 정보 등록 처리 요청.
	@PostMapping("/register")
	public String register(ScoreRequestDTO dto) {
		//단순 입력 데이터 확인해보기
		System.out.println("/score/register : POST ! - " + dto);
		
		//서비스한테 일 시키기
		service.insertScore(dto);	
		
		/*
		 * 등록 요청이 완료되었다면, 목록을 불러오는 로직을 여기다가 작성하는 것이 아니라
		 * 갱신된 목록을 불러오는 요청이 다시금 들어올수 있도록 유도 하는 기능 - > sendRedirect()
		 * 
		 * Spring에서는 리턴값에 redirect:[URL]을 주면 URL로 자동 재 요청을함
		 * 점수등록을 완료하면 - > 목록을 다시 달라는 요청 - > 점수가 등록된 목록이 켜짐
		 */
		
		return "redirect:/score/list"; // redirect:?? -> ?? 를 한번 더 재요청함
	}
	
	
	
	
}
